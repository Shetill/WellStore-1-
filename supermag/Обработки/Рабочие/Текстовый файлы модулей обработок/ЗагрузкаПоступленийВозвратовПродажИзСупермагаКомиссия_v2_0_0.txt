//Обработка предназначена для загрузки документов поступления, возвратов от поставщика и розничных продаж(ООП) в 1С Бухгалтерия//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Используемые таблицы из супермаг:
//SMSTORELOCATION 	- Справочник мест хранения (склады, магазины);
//SMCARD			- Карточки(Номенклатура);
//SACARDCLASS		- Классификатор товаров (иерархия справочника номенклатура);
//SMCLIENTINFO		- Данные о контрагенте (Контрагенты);
//
//SMDOCUMENTS		- Таблица документов (Список документов);
//SMSPEC			- Таблица спецификаций документов (Табличные части документов SMDOCUMENTS);
//SMSPECTAX			- Спецификация налоги(ставка ндс в ТЧ SMSPEC);
//SMWAYBILLSIN		- Приходные накладные(Счета-Фактуры);
//SMDOCCREDCARD		- Продажи и возвраты по кредитным картам;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#Область Основные_функции


#Область ADODB

&НаКлиенте
Функция ЗаполнитьПараметрыСоединенияOracle()
	
	Если БоеваяДемоБазаСупермаг = 1 Тогда
		Объект.Provider 	= "OraOLEDB.Oracle";
		Объект.DataSource 	= "WELLSTOR";    //При переезде базы 1С с одного сервера, на другой, может принимать значение - "WELLSTORE" (Всё зависит от ИТ специалиста настраивающего подключение к Oracle);
		Объект.UserId		= "olyread3";
		Объект.Password		= "Ewaesh5r";
	Иначе
		Объект.Provider 	= "OraOLEDB.Oracle";
		Объект.DataSource 	= "DEMO";
		Объект.UserId		= "Supermag";
		Объект.Password		= "qqq";
	КонецЕсли; 
	
КонецФункции

// // Возвращаемое значение: Connection
//   <ADODB.Connection>   - <ADODB соединение c БД Oracle>
&НаСервере
Функция Подключиться_к_БД_Oracle()
	
	//Формируем строку соединения
	ConnectionString = "Provider="+Объект.Provider+";Data Source="+Объект.DataSource+";User Id="+Объект.UserId+";Password="+Объект.Password+";";
	
	//Пытаемся подключиться
	Connection = Новый COMОбъект("ADODB.Connection");
	Попытка
		Connection.Open(ConnectionString);
		Возврат Connection;
	Исключение
		Сообщить("Подключение не удалось, по причине:  "+Строка(ОписаниеОшибки()));
	КонецПопытки;
	
КонецФункции 

// Параметры:
//  <Connection>  - <ADODB.Connection> - <ADODB соединение c БД Oracle>
//                
//  <ТекстЗапроса>  - <ADODB.Command.CommandText> - <Текст запроса для БД Oracle>
//               
// Возвращаемое значение: СоединениеSQL.Execute()
//   <СоединениеSQL.Execute()>   - <Результат запроса>
//
&НаСервере
Функция ВыполнитьЗапросOracle(Connection, ТекстЗапроса)
	
	СоединениеSQL = Новый COMОбъект("ADODB.Command");
	СоединениеSQL.ActiveConnection = Connection;
	СоединениеSQL.CommandText = ТекстЗапроса;
	RecordSet = Новый ComObject("ADODB.RecordSet");
	
	Возврат СоединениеSQL.Execute();
	
КонецФункции

#КонецОбласти 


#Область Работа_с_документами

&НаКлиенте
Процедура ВыбратьДокументы(Команда, ПоказатьПредупреждениеПользователю = Истина)
	
	ВыборОтбораПоСкладу = Объект.ИдентификаторыСкладов;
	
	Если НЕ ВыборСделан(ВыборОтбораПоСкладу) Тогда
		ПоказатьПредупреждение(,"Не установлен отбор по складу", 300, "Предупреждение");
		Возврат;
	КонецЕсли; 
	
	Если НЕ ПроверитьЗаполнение() Тогда
		ПоказатьПредупреждение(, "Не все необходимые поля заполнены", 300, "Предупреждение");
		Возврат;
	КонецЕсли; 
	
	НачДата = Формат(Объект.Период.ДатаНачала, "ДФ=dd.MM.yyyy"); 
	КонДата = Формат(Объект.Период.ДатаОкончания, "ДФ=dd.MM.yyyy");
	
	//'WI' - Поступления
	Если ДокументЗагрузки = 1 Тогда
		ТипДокумента 	= "'WI'";
		ДокументТип		= "ПоступлениеТоваровУслуг";
		ДополнительноеСвойство 		= ПолучитьДополнительноеСвойство(ДокументТип); 
		//'WO'-Возврат поставщику
	ИначеЕсли  ДокументЗагрузки = 2 Тогда
		ТипДокумента 	= "'WO'";                                            
		ДокументТип 	= "ВозвратТоваровПоставщику";
		ДополнительноеСвойство 		= ПолучитьДополнительноеСвойство(ДокументТип);
		//'CS' - Продажи
	ИначеЕсли  ДокументЗагрузки = 3 Тогда
		ТипДокумента 	= "'CS'";
		ДокументТип 	= "ОтчетОРозничныхПродажах";
		ДополнительноеСвойство 		= ПолучитьДополнительноеСвойство(ДокументТип); 
	КонецЕсли; 
	
	Если Объект.Документы.Количество()>0 Тогда
		ПоказатьПредупреждениеПользователю = Ложь;
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, ТипДокумента);
		ПоказатьВопрос(Оповещение,"Список документов будет очищен. Продолжить?", Режим, 0);
	Иначе 
		//Получаем документы, согласно отбору (ТипДокумента)
		ПолучитьСписокДокументовИзСупермага();
	КонецЕсли;
	
	Если ПоказатьПредупреждениеПользователю Тогда
		ПоказатьПредупреждение(,"Документы загружены");
		ТекущийЭлемент = Элементы.ГруппаДокументы;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, ТипДокумента)Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Документы.Очистить();
		ПолучитьСписокДокументовИзСупермага();
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

//Загрузка списка документов из Супермага (SMDOCUMENTS)
&НаСервере
Процедура ПолучитьСписокДокументовИзСупермага()
	
	СкладТЗ = Объект.ИдентификаторыСкладов.Выгрузить(Новый Структура("Флаг", Истина)); 
	СкладОтбор =  МассивВСтрокуЗапроса(СкладТЗ.ВыгрузитьКолонку("Идентификатор"));
	
	ВидДоговораПоставщика = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	
	//Формируем текст запроса для SQL Oracle
	ТекстЗапроса = 
	"SELECT  
	|	SMDOCUMENTS.ID 				AS ""Номер документа"",
	|	SMDOCUMENTS.CREATEDAT 		AS ""Дата документа"",
	|	SMDOCUMENTS.DOCSTATE 		AS ""Статус документа"",
	|	SMDOCUMENTS.LOCATIONTO 		AS ""НаСклад"",
	|	SMDOCUMENTS.LOCATIONFROM	AS ""СоСклада"",
	|	SMDOCUMENTS.CLIENTINDEX 	AS ""Поставщик"",
	|	SMDOCUMENTS.TOTALSUM		AS ""Сумма документа"",
	|	SMCLIENTINFO.NAME 			AS ""Наименование поставщика"",
	|	SMCLIENTINFO.INN 			AS ""ИНН""  
	|FROM 
	|	SUPERMAG.SMDOCUMENTS
	|LEFT JOIN
	|	SUPERMAG.SMCLIENTINFO 		ON  SMCLIENTINFO.ID = SMDOCUMENTS.CLIENTINDEX
	|WHERE 
	|	CREATEDAT 						>= TO_DATE('"+Формат(Объект.Период.ДатаНачала,"ДФ=dd.MM.yyyy")+"','DD.MM.YYYY') 
	|	AND CREATEDAT 					<= TO_DATE('"+Формат(Объект.Период.ДатаОкончания,"ДФ=dd.MM.yyyy")+"','DD.MM.YYYY')
	|	AND SMDOCUMENTS.DOCTYPE 		IN ("+Строка(ТипДокумента)+")
	|	AND SMDOCUMENTS.СкладОтбор 		IN 	("+СкладОтбор+")";	
	
	Если ДокументЗагрузки = 1 Тогда //если поступление то отбор по реквизиту "На склад"
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СкладОтбор", "LOCATIONTO"); 
	ИначеЕсли ДокументЗагрузки = 2 Тогда //если возврат поставщику то отбор по реквизиту "Со склада" и дополнительный отбор по операции документа (OPCODE = 2 = Возврат поставщику)
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СкладОтбор", "LOCATIONFROM");
		ТекстЗапроса = ТекстЗапроса +" AND  SMDOCUMENTS.OPCODE = 2";
	ИначеЕсли ДокументЗагрузки = 3 Тогда //если продажа то отбор по реквизиту "Со склада" и дополнительный отбор по операции документа (OPCODE)
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СкладОтбор", "LOCATIONFROM");
		ТекстЗапроса = ТекстЗапроса +" AND  SMDOCUMENTS.OPCODE = 1";
	КонецЕсли;
	
	//Подключаемся (к Oracle БД)и выполняем запрос
	Connection = Подключиться_к_БД_Oracle();	
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	
	//Заполняем список документов
	While  NOT RecordSet.EOF Do
		
		НоваяСтрока = Объект.Документы.Добавить();
		//ИдентификаторСМ = ДатаДокумента(из супермага) + ТипДокумента(из супермага) + НомерДокумента(из супермага)
		ИдентификаторСМ = СтрЗаменить(Строка(Формат(RecordSet.Fields("Дата документа").Value, "ДФ=dd.MM.yyyy")),".","") + Строка(СтрЗаменить(ТипДокумента,"'",""))+ Строка(RecordSet.Fields("Номер документа").Value);
		НоваяСтрока.ДокументСсылка			= ПолучитьСсылкуНаДокумент(ИдентификаторСМ, ДокументТип, ДополнительноеСвойство.Ссылка);
		
		НоваяСтрока.ДатаДокумента   		= RecordSet.Fields("Дата документа").Value;
		НоваяСтрока.НомерДокумента 			= RecordSet.Fields("Номер документа").Value;
		НоваяСтрока.ИдентификаторСМ			= ИдентификаторСМ;
		НоваяСтрока.Организация				= Объект.Организация;
		НоваяСтрока.ПоставщикНаименование 	= RecordSet.Fields("Наименование поставщика").Value;
		НоваяСтрока.ПоставщикИНН		 	= RecordSet.Fields("ИНН").Value;
		НоваяСтрока.КонтрагентСсылка        = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", RecordSet.Fields("ИНН").Value);
		НоваяСтрока.ДоговорПоставщика		= Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("ВидДоговора", ВидДоговораПоставщика, , НоваяСтрока.КонтрагентСсылка);
		НоваяСтрока.СуммаДокументаСНДС	 	= RecordSet.Fields("Сумма документа").Value;
		НоваяСтрока.Склад				 	= Объект.Склад;
		
		RecordSet.MoveNext();
		
	EndDo;
	
	RecordSet.Close();
	Connection.Close();
	
	Если Объект.Документы.Количество()>0 Тогда
		
		//Если загружаем продажи надо загрузить и возвраты, чтобы потом вычесть их из продаж
		Если ДокументЗагрузки = 3 Тогда
			ВычестьВозвратыПокупателяИзРозничныхПродаж();	
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

//Получение Табличных частей документов (SMSPEC)
&НаСервере
Функция ПолучитьСпецификацииДокументов()
	
	//Очистим табличную часть, чтобы не задублировались данные при повторных загрузках
	СпецификацииДокументов.Очистить();
	
	//Получим список записываемых документов
	МассивЗагружаемыхДокументов = Объект.Документы.Выгрузить(Новый Структура("Флаг",Истина ),).ВыгрузитьКолонку("НомерДокумента");
	
	//Разложим массив на строку, для формирования отбора в SQL запросе
	ДокументыОтбор = МассивВСтрокуЗапроса(МассивЗагружаемыхДокументов);
	
	//Формируем текст запроса
	ТекстЗапроса = 
	"SELECT
	|      SMCARD.NAME 				AS ""НаименованиеНоменклатуры"",
	|      SMCARD.IDSPIRITCODE		AS ""Алкоголь"",
	|      SMCARD.IDCLASS			AS ""КодГруппы"",
	|	   SMSPECTAX.TAXRATE        AS ""СтавкаНДС"",
	|	   SMSPECTAX.TAXSUM        	AS ""СуммаНДС"",
	|      SMSPEC.DOCID 			AS ""НомерДокумента"",  
	|      SMSPEC.ARTICLE			AS ""Артикул"",
	|	   SMSPEC.SPECITEM 			AS ""ВнутреннийНомерПозиции"", 
	|      SMSPEC.QUANTITY 			AS ""Количество"",
	|      SMSPEC.ITEMPRICE 		AS ""ЦенаСНалогами"",
	|      SMSPEC.TOTALPRICE 		AS ""СтоимостьСНалогами"",
	|      SMSPEC.ITEMPRICENOTAX 	AS ""ЦенаБезНалогов"",
	|      SMSPEC.TOTALPRICENOTAX 	AS ""СуммаБезНалогов""
	|FROM 
	|	   	SUPERMAG.SMSPEC
	|LEFT JOIN
	|	   SUPERMAG.SMSPECTAX ON SMSPECTAX.DOCID = SMSPEC.DOCID  AND SMSPECTAX.SPECITEM = SMSPEC.SPECITEM  AND SMSPECTAX.DOCTYPE = SMSPEC.DOCTYPE
	|LEFT JOIN
	|	   	SUPERMAG.SMCARD 		ON  SMSPEC.ARTICLE = SMCARD.ARTICLE
	|WHERE  
	|		SMSPEC.DOCID 			IN ("+ДокументыОтбор+") AND SMSPEC.DOCTYPE = "+Строка(ТипДокумента)+""; 
	
	//Подключаемся (к Oracle БД)и выполняем запрос
	Connection = Подключиться_к_БД_Oracle();	
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	
	While NOT RecordSet.EOF Do
		
		НоваяСтрока = СпецификацииДокументов.Добавить();
		НоваяСтрока.НомерДокумента 				= RecordSet.Fields("НомерДокумента").Value;
		НоваяСтрока.Артикул		 				= RecordSet.Fields("Артикул").Value;
		НоваяСтрока.ВнутреннийНомерПозиции		= RecordSet.Fields("ВнутреннийНомерПозиции").Value;
		НоваяСтрока.Номенклатура				= RecordSet.Fields("НаименованиеНоменклатуры").Value;
		НоваяСтрока.КодГруппы					= RecordSet.Fields("КодГруппы").Value;
		НоваяСтрока.Количество	 				= RecordSet.Fields("Количество").Value;
		НоваяСтрока.ЦенаБезНДС		 			= RecordSet.Fields("ЦенаБезНалогов").Value;
		НоваяСтрока.СуммаБезНДС	 				= Формат(?(RecordSet.Fields("СуммаБезНалогов").Value = NULL, 0,RecordSet.Fields("СуммаБезНалогов").Value),"ЧЦ=20; ЧДЦ=2");
		НоваяСтрока.Цена		 				= RecordSet.Fields("ЦенаСНалогами").Value;
		НоваяСтрока.Сумма			 			= RecordSet.Fields("СтоимостьСНалогами").Value;
		НоваяСтрока.Алкоголь					= RecordSet.Fields("Алкоголь").Value;
		НоваяСтрока.СтавкаНДС 					= RecordSet.Fields("СтавкаНДС").Value;
		НоваяСтрока.СуммаНДС					= RecordSet.Fields("СуммаНДС").Value;
		НоваяСтрока.СчетУчета 					= СчетУчетаТоваровКомиссия;
		НоваяСтрока.СчетУчетаНДС				= СчетУчетаНДС;
		
		RecordSet.MoveNext();
		
	EndDo;
	
	RecordSet.Close();
	Connection.Close();
	
	//Проставим флаг на собственный товар
	тзСпецификацииДокументов = РеквизитФормыВЗначение("СпецификацииДокументов");
	ЗаполнитьПризнакТовараСобственныйКомисссия(тзСпецификацииДокументов);
	ЗначениеВРеквизитФормы(тзСпецификацииДокументов,"СпецификацииДокументов");
	
	
КонецФункции

//Получим возвраты от розничного покупателя, для вычитания из продаж
&НаСервере
Функция ПолучитьВозвратыОтРозничногоПокупателя()
	
	СпецификацииВозвратовОтПокупателя.Очистить();
	
	ДокументыПродажиОтбор = МассивВСтрокуЗапроса(Объект.Документы.Выгрузить(,"НомерДокумента").ВыгрузитьКолонку("НомерДокумента"));
	
	ТекстЗапроса =
	"SELECT 
	|		SMCARD.IDSPIRITCODE   AS ""Алкоголь"",
	|		SMCARD.IDCLASS		  AS ""КодГруппы"",
	|		SMSPECTAX.TAXRATE     AS ""СтавкаНДС"",
	|		SMSPECTAX.TAXSUM      AS ""СуммаНДС"",		
	|	   	SMSPEC.CAUSEID        AS ""ДокументПродажи"",
	|		SMSPEC.QUANTITY       AS ""Количество"",
	|		SMSPEC.TOTALPRICE     AS ""СтоимостьСНалогами""		
	|FROM 
	|		SUPERMAG.SMSPEC
	|LEFT JOIN
	|	    SUPERMAG.SMSPECTAX ON SMSPECTAX.DOCID = SMSPEC.DOCID  AND SMSPECTAX.SPECITEM = SMSPEC.SPECITEM  AND SMSPECTAX.DOCTYPE = SMSPEC.DOCTYPE 
	|LEFT JOIN
	|    	SUPERMAG.SMCARD 		ON  SMSPEC.ARTICLE = SMCARD.ARTICLE
	|WHERE 
	|		SMSPEC.CAUSEID IN ("+ДокументыПродажиОтбор+") AND  SMSPEC.DOCTYPE = 'CR' ";
	
	//Подключаемся (к Oracle БД)и выполняем запрос
	Connection = Подключиться_к_БД_Oracle();	
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	
	//Заполняем список документов СпецификацииВозвратовОтПокупателя
	While Not RecordSet.EOF Do
		НоваяСтрока = СпецификацииВозвратовОтПокупателя.Добавить();
		НоваяСтрока.ДокументПродажи		= RecordSet.Fields("ДокументПродажи").Value;
		НоваяСтрока.Количество			= RecordSet.Fields("Количество").Value;
		Если RecordSet.Fields("СтавкаНДС").Value = 18 Тогда
			СтавкаНДС = НДС18;
		ИначеЕсли RecordSet.Fields("СтавкаНДС").Value = 10 Тогда
			СтавкаНДС = НДС10;
		Иначе
			СтавкаНДС = БезНДС;
		КонецЕсли; 
		НоваяСтрока.СтавкаНДС			= СтавкаНДС;
		НоваяСтрока.Алкоголь			= RecordSet.Fields("Алкоголь").Value;
		НоваяСтрока.КодГруппы			= RecordSet.Fields("КодГруппы").Value;
		НоваяСтрока.СтоимостьСНалогами	= RecordSet.Fields("СтоимостьСНалогами").Value;	
		RecordSet.MoveNext();
	EndDo;
	
	RecordSet.Close();
	Connection.Close();
	
	тзСпецификацииВозвратовОтПокупателя = РеквизитФормыВЗначение("СпецификацииВозвратовОтПокупателя");
	ЗаполнитьПризнакТовараСобственныйКомисссия(тзСпецификацииВозвратовОтПокупателя);
	ЗначениеВРеквизитФормы(тзСпецификацииВозвратовОтПокупателя,"СпецификацииВозвратовОтПокупателя");
	
КонецФункции

//Процедура вычетает из розничных продаж, возвраты от покупателей
&НаСервере
Процедура ВычестьВозвратыПокупателяИзРозничныхПродаж()
	
	ПолучитьВозвратыОтРозничногоПокупателя();
	ВозвратПокупателя = СпецификацииВозвратовОтПокупателя.Выгрузить(,"ДокументПродажи,СтоимостьСНалогами");
	ВозвратПокупателя.Свернуть("ДокументПродажи","СтоимостьСНалогами");
	
	//Заполним колонку "СуммаВозвратов" в ТЧ (обработки) "Документы"
	Для каждого СтрокаДокумент Из Объект.Документы Цикл
		
		ПоискВозвратПокупателя = ВозвратПокупателя.Найти(СтрокаДокумент.НомерДокумента);
		
		Если ПоискВозвратПокупателя = Неопределено Тогда
			Продолжить;		
		КонецЕсли; 
		
		Если СтрокаДокумент.ДокументСсылка.СуммаДокумента = СтрокаДокумент.СуммаДокументаСНДС - ПоискВозвратПокупателя.СтоимостьСНалогами Тогда
			СтрокаДокумент.ДокументСуществуетИзменен = 1; //документ есть в базе но сумма не изменилась
		Иначе	
			СтрокаДокумент.ДокументСуществуетИзменен = 2; //документ есть в базе но сумма изменилась
		КонецЕсли; 
		
		СтрокаДокумент.СуммаВозвратов = ПоискВозвратПокупателя.СтоимостьСНалогами;
		
	КонецЦикла;
	
КонецПроцедуры

//Получаем счет-фактуры и накладные поставщика из Супермаг+
&НаСервере
Функция ПолучитьНакладнуюСчетФактуруПолученныйИзСМ(ОтборПоНомеру)
	
	//Формируем текст запроса для SQL Oracle
	ТекстЗапроса =	
	"SELECT
	|	SUPPLIERINVOICE 	AS ""СчетфактураПоставщика"",
	|	SUPPLINVOICECREATE 	AS ""ДатаСчетфактуры"",
	|   SUPPLIERDOC 		AS ""НакладнаяПоставщика"",
	|	SUPPLIERDOCCREATE	AS ""ДатаНакладной""
	|FROM 
	|	SUPERMAG.SMWAYBILLSIN
	|WHERE 
	|	ID = '"+ОтборПоНомеру+"'";
	
	Connecting 	= Подключиться_к_БД_Oracle();
	RecordSet	= ВыполнитьЗапросOracle(Connecting, ТекстЗапроса);
	
	НакладнаяСчетФактура = Новый Массив;
	
	While NOT RecordSet.EOF Do
		
		Если RecordSet.Fields("СчетфактураПоставщика").Value <> NULL Тогда
			НакладнаяСчетФактура.Вставить(0,RecordSet.Fields("СчетфактураПоставщика").Value);
			НакладнаяСчетФактура.Вставить(1,RecordSet.Fields("ДатаСчетфактуры").Value);
			НакладнаяСчетФактура.Вставить(2,RecordSet.Fields("НакладнаяПоставщика").Value);
			НакладнаяСчетФактура.Вставить(3,RecordSet.Fields("ДатаНакладной").Value);
		КонецЕсли; 
		
		RecordSet.MoveNext();
		
	EndDo;
	
	RecordSet.Close();
	Connecting.Close();
	
	Возврат НакладнаяСчетФактура;
	
КонецФункции 

//Получим из супермага Счет фактуру выданную
&НаСервере
Функция ПолучитьСчетФактуруВыданныйИзСМ(ОтборПоНомеру)
	
	//Формируем текст запроса для SQL Oracle
	ТекстЗапроса =	
	"SELECT
	|	INVOICE 	AS ""СчетфактураПоставщика"",
	|	INVOICEDATE	AS ""ДатаСчетфактуры""
	|FROM 
	|	SUPERMAG.SMWAYBILLSOUT
	|WHERE 
	|	ID = '"+ОтборПоНомеру+"'";
	
	Connecting 	= Подключиться_к_БД_Oracle();
	RecordSet	= ВыполнитьЗапросOracle(Connecting, ТекстЗапроса);
	
	НакладнаяСчетФактура = Новый Массив;
	
	While NOT RecordSet.EOF Do
		
		Если RecordSet.Fields("СчетфактураПоставщика").Value <> NULL Тогда
			НакладнаяСчетФактура.Вставить(0,RecordSet.Fields("СчетфактураПоставщика").Value);
			НакладнаяСчетФактура.Вставить(1,RecordSet.Fields("ДатаСчетфактуры").Value);
		КонецЕсли; 
		
		RecordSet.MoveNext();
		
	EndDo;
	
	RecordSet.Close();
	Connecting.Close();
	
	Возврат НакладнаяСчетФактура;
	
КонецФункции 

// <Описание функции>
//
// Параметры:
//  ДокументСсылка  	- Документ.Ссылка 	- Ссылка на документ основание 
//  НомерСФИзСМ			- Строка 			- Номер  сч.фактуры полученный из Суперамг+
//  ДатаСФИзСМ			- Строка 			- Дата  сч.фактуры полученная из Супермаг+
//
// Возвращаемое значение: Нет   
// 
&НаСервереБезКонтекста
Функция ЗарегистрироватьСчетФактуруПолученный(ДокументСсылка, НомерСФИзСМ, ДатаСФИзСМ)
	
	Попытка
		УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ДокументСсылка, НомерСФИзСМ, ДатаСФИзСМ, ДокументСсылка.Контрагент, Неопределено);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  ДокументОснование	- Документ.Объект 	- документ основание, для регистрируемой СФ
//  НомерСФИзСМ			- Строка 			- номер счёт фактуры из Супермаг+, который необходимо присвоить создаваемой СФ
//
// Возвращаемое значение: нет
//
&НаСерверебезКонтекста
Функция ЗарегистрироватьСчетФактуруВыданный(ДокументОснование, НомерСФИзСМ)
	
	Попытка
		СсылкаСчетФактураНовый = 	УчетНДСПереопределяемый.СоздатьСчетФактуруВыданныйНаОсновании(ДокументОснование);
		ОбъектСчетФактураНовый = СсылкаСчетФактураНовый.ПолучитьОбъект();
		ОбъектСчетФактураНовый.Номер = НомерСФИзСМ;
		ОбъектСчетФактураНовый.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции  

//<Ищем документ по Дополнительному свойству>
//
// Параметры:
//  <ИдентификаторСМ>  - <Строка.ДатаНомер> - < номер документа, как Датадокумента + ТипДокумента + НомерДокумента, для поиска по доп.свойству "Идентификатор СМ">
//                 
//  <ДокументТип>  - <ДокументСсылка.ТипДокумента> - <по какому документу искать (поступление, возврат и пр.)>
//                 
//  <ДопСвойство> - <ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Ссылка>
//
// Возвращаемое значение:
//   <Документ.ТипДоркумента.Ссылка или Документ.ТипДоркумента.ПустаяСсылка>   - <если нашли документ то передаем ссылку на него иначе передаем пустую ссылку>
&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаДокумент(ИдентификаторСМ, ДокументТип, ДопСвойство)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСМ", ИдентификаторСМ);
	Запрос.УстановитьПараметр("Свойство", ДопСвойство);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект.Ссылка
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект ССЫЛКА Документ."+ДокументТип+"
	|	И ДополнительныеСведения.Свойство = &Свойство
	|	И ДополнительныеСведения.Значение = &ИдентификаторСМ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат	Документы[ДокументТип].ПустаяСсылка();
	Иначе
		Возврат	РезультатЗапроса.Выгрузить()[0].ОбъектСсылка;	
	КонецЕсли; 
	
КонецФункции

//Функция получает сумму безналичных продаж по идентификатору  документа продаж из Супермаг+
&НаСервере
Функция ПолучитьБезнал(ID)	
	
	//Получим сумму продаж по безналу
	ТекстЗапроса =
	"SELECT TOTALSUM
	|	FROM SUPERMAG.SMDOCCREDCARD
	|	WHERE id = '"+ID+"'";
	
	Connection = Подключиться_к_БД_Oracle();	
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	СуммаБезнал = 0;
	While RecordSet.EOF = False DO
		СуммаБезнал = СуммаБезнал + RecordSet.Fields("TOTALSUM").Value;
		RecordSet.MoveNext(); 
	EndDo;
	RecordSet.Close();
	Connection.Close();
	
	//изменим префикс документа с CS на CR чтобы получить сумму возвратов по безналу
	ID = СтрЗаменить(ID, "CS", "CR");
	//И сформируем запрос заново
	ТекстЗапроса =
	"SELECT TOTALSUM
	|	FROM SUPERMAG.SMDOCCREDCARD
	|	WHERE id = '"+ID+"'";
	
	Connection = Подключиться_к_БД_Oracle();	
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	СуммаБезналВозврат = 0;
	While RecordSet.EOF = False DO
		СуммаБезналВозврат = СуммаБезналВозврат + RecordSet.Fields("TOTALSUM").Value;
		RecordSet.MoveNext(); 
	EndDo;
	RecordSet.Close();
	Connection.Close();	
	//Вычтем возвраты
	Return СуммаБезнал - СуммаБезналВозврат;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПризнакТовараСобственныйКомисссия(тзСпецификации)
	
	тзОтборГруппыТовара = РеквизитФормыВЗначение("ОтборГруппыТовара");
	
	Для каждого тСтр Из тзСпецификации Цикл
		
		Если тзОтборГруппыТовара.Найти(тСтр.КодГруппы,"КодГруппы")= Неопределено Тогда
			Продолжить;			
		КонецЕсли;
		
		тСтр.ТоварСобственный = Истина;
		
	КонецЦикла; 
	
КонецФункции

//Запишем выбранные документы
&НаКлиенте
Процедура ЗаписатьДокументы(Команда)
	
	//Проверим был ли выбран на запись хотя бы один документ
	ДокументыНаЗапись = Объект.Документы;
	Если НЕ ВыборСделан(ДокументыНаЗапись) Тогда
		ПоказатьПредупреждение(,"Не выбрано ни одного документа, для записи!!!", 30, "Предупреждение!");
		Возврат;
	КонецЕсли;
	
	//Заполним отбор по группам, на основании выбора пользователя, в "НоменклатурныеГруппы"
	ПолучитьОтборПоГруппам("");
	
	//Получим табличные части, записываемых, документов
	ПолучитьСпецификацииДокументов();
	
	//Запишем документы в текущую БД
	Если ДокументЗагрузки = 1 Тогда
		ЗаписатьПоступленияОтПоставщика();
	ИначеЕсли  ДокументЗагрузки = 2 Тогда
		ЗаписатьВозвратыОтПоставщика();
	ИначеЕсли  ДокументЗагрузки = 3 Тогда 
		ЗаписатьРозничныеПродажи();
	КонецЕсли;
	
	//Очистим список документов и перезаполним его
	Объект.Документы.Очистить();
	ВыбратьДокументы("", Ложь);
	
	ПоказатьПредупреждение(,"Документы записаны");
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПоступленияОтПоставщика()
	
	ВыбраныеДокументыОтбор = Новый Структура("Флаг",Истина ); 
	ЗаписываемыеДокументыТЗ = Объект.Документы.Выгрузить(ВыбраныеДокументыОтбор,);	
	ЗаписанныеДокументы.Очистить();
	
	//Записываем поступления от поставщиков ('WI')
	Для каждого ДокументСтрока Из ЗаписываемыеДокументыТЗ Цикл
		
		СсылкаНаДокумент =  ДокументСтрока.ДокументСсылка;
		
		//Получем номера и даты счет-фактуры и накладной поставщика
		НакладнаяСчетФактура = ПолучитьНакладнуюСчетФактуруПолученныйИзСМ(ДокументСтрока.НомерДокумента);
		Если НакладнаяСчетФактура.Количество() > 0 Тогда
			НомерСчетФактуры			= НакладнаяСчетФактура[0];
			ДатаСчетФактуры				= НакладнаяСчетФактура[1];
			НомерНакладнойПоставщика 	= НакладнаяСчетФактура[2];
			ДатаНакладнойПоставщика		= НакладнаяСчетФактура[3];
		КонецЕсли; 
		
		Если СсылкаНаДокумент =  Документы[ДокументТип].ПустаяСсылка() Тогда
			ДокументПоступления =  Документы[ДокументТип].СоздатьДокумент();
		Иначе
			ДокументПоступления = СсылкаНаДокумент.ПолучитьОбъект();
			//Очищаем табличную часть, документа, "Товары", чтобы потом записать новые данные
			ДокументПоступления.Товары.Очистить();
		КонецЕсли;
		
		//Заполним основные (общие) реквизиты шапки документа
		ЗаполнитьШапкуДокумента(ДокументСтрока, ДокументПоступления);
		
		//Дозаполним реквизиты шапки
		ДокументПоступления.ВидОперации 				= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		ДокументПоступления.НомерВходящегоДокумента		= НомерНакладнойПоставщика;
		ДокументПоступления.ДатаВходящегоДокумента      = ДатаНакладнойПоставщика;
		
		//Получим табличную часть документа
		ТоварыТЗ = СпецификацииДокументов.Выгрузить(Новый Структура("НомерДокумента", ДокументСтрока.НомерДокумента),);
		
		//Заполним табличную часть документа
		ЗаполнитьТабличнуюЧастьТовары(ДокументПоступления, ТоварыТЗ);
		
		//Попытаемся записать документ
		Попытка
			ДокументПоступления.Записать(РежимЗаписиДокумента.Запись);
			НоваяСтрокаДокЗаписан  = ЗаписанныеДокументы.Добавить();
			НоваяСтрокаДокЗаписан.Документ = ДокументПоступления.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		//Если это новый документ, то присвоим и запишем ему дополнительное свойство "Идентификатор СМ"
		Если СсылкаНаДокумент = Документы[ДокументТип].ПустаяСсылка() Тогда
			ЗаписатьИдентификаторСМ(ДокументПоступления.Ссылка, ДополнительноеСвойство, ДокументСтрока.ИдентификаторСМ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НомерСчетФактуры) Тогда
			ЗарегистрироватьСчетФактуруПолученный(ДокументПоступления.Ссылка, НомерСчетФактуры, ДатаСчетФактуры); 
		КонецЕсли; 
		
	КонецЦикла;
	
КонецФункции 

&НаСервере
Функция ЗаписатьВозвратыОтПоставщика()
	
	ВыбраныеДокументыОтбор = Новый Структура("Флаг", Истина); 
	ЗаписываемыеДокументыТЗ = Объект.Документы.Выгрузить(ВыбраныеДокументыОтбор,);	
	ЗаписанныеДокументы.Очистить();
	
	//Записываем возвраты поставщику ('WO')
	Для каждого ДокументСтрока Из ЗаписываемыеДокументыТЗ Цикл
		
		//Получем номера и дат счет-фактуры 	
		НакладнаяСчетФактура = ПолучитьСчетФактуруВыданныйИзСМ(ДокументСтрока.НомерДокумента);
		Если НакладнаяСчетФактура.Количество() > 0 Тогда
			НомерСчетФактуры			= НакладнаяСчетФактура[0];
			ДатаСчетФактуры				= НакладнаяСчетФактура[1];
		КонецЕсли; 
		
		СсылкаНаДокумент =  ДокументСтрока.ДокументСсылка;
		
		Если СсылкаНаДокумент =  Документы[ДокументТип].ПустаяСсылка() Тогда
			ДокументВозвратПоставщику = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
		Иначе
			ДокументВозвратПоставщику = СсылкаНаДокумент.ПолучитьОбъект();
			//Очищаем табличную часть, документа, "Товары", чтобы потом записать новые данные
			ДокументВозвратПоставщику.Товары.Очистить();
		КонецЕсли;
		
		//Заполним основные (общие) реквизиты шапки документа
		ЗаполнитьШапкуДокумента(ДокументСтрока, ДокументВозвратПоставщику);
		
		//Дозаполним реквизиты шапки
		ДокументВозвратПоставщику.ВидОперации 						= Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
		ДокументВозвратПоставщику.СчетУчетаРасчетовПоПретензиям		= СчетУчетаРасчетовПоПретензиям;
		
		//Получим табличную часть документа
		ТоварыТЗ = СпецификацииДокументов.Выгрузить(Новый Структура("НомерДокумента", ДокументСтрока.НомерДокумента),);
		
		//Заполняем табличную часть документа
		ЗаполнитьТабличнуюЧастьТовары(ДокументВозвратПоставщику, ТоварыТЗ);		
		Попытка
			ДокументВозвратПоставщику.Записать(РежимЗаписиДокумента.Запись);
			НоваяСтрокаДокЗаписан  = ЗаписанныеДокументы.Добавить();
			НоваяСтрокаДокЗаписан.Документ = ДокументВозвратПоставщику.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		//Если это новый документ, то присвоим и запишем ему дополнительное свойство "Идентификатор СМ"
		Если СсылкаНаДокумент = Документы[ДокументТип].ПустаяСсылка() Тогда
			ЗаписатьИдентификаторСМ(ДокументВозвратПоставщику.Ссылка, ДополнительноеСвойство, ДокументСтрока.ИдентификаторСМ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НомерСчетФактуры) Тогда
			ЗарегистрироватьСчетФактуруВыданный(ДокументВозвратПоставщику.Ссылка, НомерСчетФактуры); 
		КонецЕсли; 
		
	КонецЦикла;
	
КонецФункции 

&НаСервере
Функция ЗаписатьРозничныеПродажи()
	
	ЗаписываемыеДокументыТЗ = Объект.Документы.Выгрузить(Новый Структура("Флаг", Истина),);	
	ЗаписанныеДокументы.Очистить();
	
	//Записываем документы отчет о розничных продажах
	Для каждого ДокументСтрока Из ЗаписываемыеДокументыТЗ Цикл
		
		СсылкаНаДокумент =  ДокументСтрока.ДокументСсылка;
		
		Если СсылкаНаДокумент =  Документы[ДокументТип].ПустаяСсылка() Тогда
			ДокументОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		Иначе
			ДокументОтчетОРозничныхПродажах = СсылкаНаДокумент.ПолучитьОбъект();
		КонецЕсли;
		
		//Заполним основные (общие) реквизиты шапки документа
		ЗаполнитьШапкуДокумента(ДокументСтрока, ДокументОтчетОРозничныхПродажах);
		
		//Дозаполним реквизиты шапки
		ДокументОтчетОРозничныхПродажах.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
		
		//Получим табличную часть документа
		ТоварыТЗ = СпецификацииДокументов.Выгрузить(Новый Структура("НомерДокумента", ДокументСтрока.НомерДокумента),);
		ТоварыВозвратПокупателяТЗ = СпецификацииВозвратовОтПокупателя.Выгрузить(Новый Структура("ДокументПродажи",ДокументСтрока.НомерДокумента ),); 
		
		//Заполняем табличную часть документа
		ЗаполнитьТабличнуюЧастьПродажиТовары(ДокументОтчетОРозничныхПродажах, ТоварыТЗ, ТоварыВозвратПокупателяТЗ);
		
		//Заполним безналичные продажи
		СуммаБензаличныхПродаж = ПолучитьБезнал(ДокументСтрока.НомерДокумента);
		
		Если СуммаБензаличныхПродаж <> "" Тогда
			ДокументОтчетОРозничныхПродажах.Оплата.Очистить();
			ОплатаНоваяСтрока = ДокументОтчетОРозничныхПродажах.Оплата.Добавить();
			ОплатаНоваяСтрока.ВидОплаты 	= ВидОплатыБезнал;
			ОплатаНоваяСтрока.СуммаОплаты	= СуммаБензаличныхПродаж;          
		КонецЕсли;
		
		Попытка
			ДокументОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
			НоваяСтрокаДокЗаписан  = ЗаписанныеДокументы.Добавить();
			НоваяСтрокаДокЗаписан.Документ = ДокументОтчетОРозничныхПродажах.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		//Если это новый документ, то присвоим и запишем ему дополнительное свойство "Идентификатор СМ"
		Если СсылкаНаДокумент = Документы[ДокументТип].ПустаяСсылка() Тогда
			ЗаписатьИдентификаторСМ(ДокументОтчетОРозничныхПродажах.Ссылка, ДополнительноеСвойство, ДокументСтрока.ИдентификаторСМ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции 	

//Заполняем общие реквизиты шапки документов
&НаСервере
Функция ЗаполнитьШапкуДокумента(ДокументИзСМ, ДокументЗаполнения)
	
	ВалютаРубль = Справочники.Валюты.НайтиПоКоду("643");
	
	ДокументЗаполнения.Ответственный					= ПараметрыСеанса.ТекущийПользователь;
	ДокументЗаполнения.Комментарий 						= ДокументИзСМ.ПоставщикНаименование;
	ДокументЗаполнения.Склад							= ДокументИзСМ.Склад;
	ДокументЗаполнения.Дата 							= ДокументИзСМ.ДатаДокумента;
	ДокументЗаполнения.Организация						= Объект.Организация;
	ДокументЗаполнения.ВалютаДокумента					= ВалютаРубль;
	Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг")или ТипЗнч(ДокументЗаполнения) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		ДокументЗаполнения.СчетУчетаРасчетовСКонтрагентом 	= СчетУчетаРассчетовСКонтрагентами;
		ДокументЗаполнения.Контрагент						= ДокументИзСМ.КонтрагентСсылка;
		ДокументЗаполнения.ДоговорКонтрагента   			= ДокументИзСМ.ДоговорПоставщика;
	ИначеЕсли 	ТипЗнч(ДокументЗаполнения) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		ДокументЗаполнения.СчетКасса = СчетКасса;
	КонецЕсли; 
	
	Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		ДокументЗаполнения.СпособЗачетаАвансов				= Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	КонецЕсли; 
	
	Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		ДокументЗаполнения.КурсВзаиморасчетов			= ЗаполнениеДокументов.КурсДокумента(ДокументЗаполнения, ВалютаРубль);
		ДокументЗаполнения.КратностьВзаиморасчетов		= ЗаполнениеДокументов.КратностьДокумента(ДокументЗаполнения, ВалютаРубль);                     
	КонецЕсли;
	
	ДокументЗаполнения.СуммаВключаетНДС					= Истина;
	ДокументЗаполнения.СуммаДокумента					= ДокументИзСМ.СуммаДокументаСНДС;
	
КонецФункции

//Заполним табличную часть "Товары" поступлений и возвратов от поставщика
&НаСервере
Функция ЗаполнитьТабличнуюЧастьТовары(Документ, ТаблицаТоваров)	
	
	//Номенклатура для НДС
	НоменклатураПоНДС = Объект.НоменклатураДляСтавокНДС.Выгрузить();
	КомиссионнаяНоменклатураПоНДС 	= Объект.КомиссионаяНоменклатураДляСтавокНДС.Выгрузить();
	
	//Предварительно очистим табличную часть документа
	Документ.Товары.Очистить();
	
	ТаблицаТоваров.Свернуть("СтавкаНДС, ТоварСобственный","Количество, Сумма, СуммаНДС");
	
	Для каждого СтрокаТовар Из ТаблицаТоваров Цикл
		
		Если СтрокаТовар.СтавкаНДС = 18 Тогда
			ПоискПоНДС = НДС18;
		ИначеЕсли СтрокаТовар.СтавкаНДС = 10 Тогда 
			ПоискПоНДС = НДС10;
		Иначе
			ПоискПоНДС = БезНДС;
		КонецЕсли;
		
		Если СтрокаТовар.ТоварСобственный Тогда
			СтрокаНоменклатурыСНДС = НоменклатураПоНДС.Найти(ПоискПоНДС);
			ТоварСчетУчета	= СчетУчетаТоваров;
		Иначе 
			СтрокаНоменклатурыСНДС = 	КомиссионнаяНоменклатураПоНДС.Найти(ПоискПоНДС);	
			ТоварСчетУчета	= СчетУчетаТоваровКомиссия;
		КонецЕсли; 
		
		НоваяСтрокаТовар = Документ.Товары.Добавить();
		НоваяСтрокаТовар.СтавкаНДС		= СтрокаНоменклатурыСНДС.СтавкаНДС;
		НоваяСтрокаТовар.Номенклатура   = СтрокаНоменклатурыСНДС.Номенклатура;
		НоваяСтрокаТовар.Количество		= СтрокаТовар.Количество;
		НоваяСтрокаТовар.СчетУчета		= ТоварСчетУчета;
		НоваяСтрокаТовар.Цена			= (СтрокаТовар.Сумма/СтрокаТовар.Количество);
		НоваяСтрокаТовар.Сумма			= СтрокаТовар.Сумма;
		НоваяСтрокаТовар.СуммаНДС		= СтрокаТовар.СуммаНДС;
		НоваяСтрокаТовар.СчетУчетаНДС	= СчетУчетаНДС;
	КонецЦикла;
	
	
КонецФункции

//Заполним табличные части "Товары" и "Агентские услуги", в отчетах о розничных продажах
&НаСервере
Функция ЗаполнитьТабличнуюЧастьПродажиТовары(Документ, ТаблицаТоваров, тзВозвраты)
	
	
	#Область старый_код_с_разбивкой_по_алкоголю
	////Номенклатура для НДС
	//НоменклатураПоНДС 				= Объект.НоменклатураДляСтавокНДС.Выгрузить();
	//КомиссионнаяНоменклатураПоНДС 	= Объект.КомиссионаяНоменклатураДляСтавокНДС.Выгрузить();
	//
	////Предварительно очистим табличные части документа
	//Документ.Товары.Очистить();
	//Документ.АгентскиеУслуги.Очистить();
	//
	//ЗапросВозвраты = Новый Запрос;
	//ЗапросВозвраты.УстановитьПараметр("ВозвратыПокупателяТЗ", ТоварыВозвратПокупателяТЗ);
	//ЗапросВозвраты.Текст = 
	//"ВЫБРАТЬ
	//|	ВозвратыПокупателяТЗ.СтавкаНДС 			КАК СтавкаНДС,
	//|	ВозвратыПокупателяТЗ.СуммаНДС 			КАК СуммаНДС,
	//|	ВозвратыПокупателяТЗ.Алкоголь 			КАК Алкоголь,
	//|	ВозвратыПокупателяТЗ.СтоимостьСНалогами КАК СтоимостьСНалогами,
	//|	ВозвратыПокупателяТЗ.Количество 		КАК Количество
	//|ПОМЕСТИТЬ ВозвратыПокупателя_ВТ
	//|ИЗ
	//|	&ВозвратыПокупателяТЗ КАК ВозвратыПокупателяТЗ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВозвратыПокупателя_ВТ.СтавкаНДС 			КАК СтавкаНДС,
	//|	ВозвратыПокупателя_ВТ.СуммаНДС 				КАК СуммаНДС,
	//|	ВозвратыПокупателя_ВТ.Алкоголь 				КАК Алкоголь,
	//|	ВозвратыПокупателя_ВТ.СтоимостьСНалогами	КАК СтоимостьСНалогами,
	//|	ВозвратыПокупателя_ВТ.Количество 			КАК Количество
	//|ИЗ
	//|	ВозвратыПокупателя_ВТ КАК ВозвратыПокупателя_ВТ
	//|ГДЕ
	//|	ВозвратыПокупателя_ВТ.Алкоголь <> """"
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ВозвратыПокупателя_ВТ";
	//
	//ВозвратыАлкогольТЗ = ЗапросВозвраты.Выполнить().Выгрузить();
	//ВозвратыАлкогольТЗ.Свернуть("СтавкаНДС","Количество, СуммаНДС, СтоимостьСНалогами");
	//
	////Меняем условие отбора по алкоголю на без алкоголь
	//ЗапросВозвраты.Текст = СтрЗаменить(ЗапросВозвраты.Текст,"<>","=");
	//
	//ВозвратыБезАлкогольТЗ = ЗапросВозвраты.Выполнить().Выгрузить();
	//ВозвратыБезАлкогольТЗ.Свернуть("СтавкаНДС","Количество, СуммаНДС, СтоимостьСНалогами");
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Товары.СтавкаНДС 		КАК СтавкаНДС,
	//|	Товары.Сумма 			КАК Сумма,
	//|	Товары.СуммаНДС 		КАК СуммаНДС,
	//|	Товары.Алкоголь 		КАК Алкоголь,
	//|	Товары.ТоварСобственный	КАК ТоварСобственный,
	//|	Товары.Количество 		КАК Количество
	//|ПОМЕСТИТЬ Товары_ВТ
	//|ИЗ
	//|	&ТаблицаТоваров КАК Товары
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Товары_ВТ.СтавкаНДС 		КАК СтавкаНДС,
	//|	Товары_ВТ.Сумма 			КАК Сумма,
	//|	Товары_ВТ.СуммаНДС			КАК СуммаНДС,
	//|	Товары_ВТ.Алкоголь 			КАК Алкоголь,
	//|	Товары_ВТ.ТоварСобственный	КАК ТоварСобственный,
	//|	Товары_ВТ.Количество		КАК Количество
	//|ИЗ
	//|	Товары_ВТ КАК Товары_ВТ
	//|ГДЕ
	//|	Товары_ВТ.Алкоголь <> """"
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ Товары_ВТ" ;
	//
	//ТаблицаАлкоголь = Запрос.Выполнить().Выгрузить(); 	
	//ТаблицаАлкоголь.Свернуть("СтавкаНДС, ТоварСобственный","Количество, Сумма, СуммаНДС");
	//
	//СтрокаПоискаВозвратАлкоголь = ВозвратыАлкогольТЗ.Найти(НоменклатураДляАлкоголя.СтавкаНДС); 
	//Для каждого АлкогольСтр Из ТаблицаАлкоголь Цикл
	//	
	//	Если АлкогольСтр.ТоварСобственный Тогда
	//		НоваяСтрокаТовар = Документ.Товары.Добавить();
	//		НоваяСтрокаТовар.СтавкаНДС					= НоменклатураДляАлкоголя.СтавкаНДС;
	//		НоваяСтрокаТовар.Номенклатура   			= НоменклатураДляАлкоголя.Ссылка;
	//		НоваяСтрокаТовар.СчетУчета					= СчетУчетаТоваров;
	//		НоваяСтрокаТовар.СчетДоходов				= СчетДоходовАлкоголь;
	//		НоваяСтрокаТовар.СчетРасходов				= СчетРасходов;
	//		НоваяСтрокаТовар.СчетУчетаНДСПоРеализации	= СчетУчетаНДСАлкоголь;
	//		
	//		Если СтрокаПоискаВозвратАлкоголь = Неопределено Тогда
	//			НоваяСтрокаТовар.Количество				= АлкогольСтр.Количество;
	//			НоваяСтрокаТовар.Цена					= (АлкогольСтр.Сумма/АлкогольСтр.Количество);
	//			НоваяСтрокаТовар.Сумма					= АлкогольСтр.Сумма;
	//			НоваяСтрокаТовар.СуммаНДС				= АлкогольСтр.СуммаНДС;
	//		Иначе
	//			НоваяСтрокаТовар.Количество				= ?(АлкогольСтр.Количество-СтрокаПоискаВозвратАлкоголь.Количество < 0,1,АлкогольСтр.Количество-СтрокаПоискаВозвратАлкоголь.Количество);
	//			НоваяСтрокаТовар.Цена					= (АлкогольСтр.Сумма - СтрокаПоискаВозвратАлкоголь.СтоимостьСНалогами)/(АлкогольСтр.Количество-СтрокаПоискаВозвратАлкоголь.Количество);
	//			НоваяСтрокаТовар.Сумма					= АлкогольСтр.Сумма - СтрокаПоискаВозвратАлкоголь.СтоимостьСНалогами;
	//			НоваяСтрокаТовар.СуммаНДС				= АлкогольСтр.СуммаНДС - СтрокаПоискаВозвратАлкоголь.СуммаНДС ;
	//		КонецЕсли;
	//		
	//	Иначе
	//		НоваяСтрокаТовар = Документ.АгентскиеУслуги.Добавить();
	//		НоваяСтрокаТовар.СтавкаНДС					= НоменклатураДляАлкоголя.СтавкаНДС;
	//		НоваяСтрокаТовар.Номенклатура   			= НоменклатураДляАлкоголя.Ссылка;
	//		НоваяСтрокаТовар.Контрагент					= Объект.Комитент;
	//		НоваяСтрокаТовар.ДоговорКонтрагента			= ДоговорКомиссии;
	//		НоваяСтрокаТовар.СчетРасчетов				= СчетУчетаРассчетовСКонтрагентами;
	//		
	//		//СтрокаПоискаВозвратАлкоголь = ВозвратыАлкогольТЗ.Найти(НоменклатураДляАлкоголя.СтавкаНДС); 
	//		Если СтрокаПоискаВозвратАлкоголь = Неопределено Тогда
	//			НоваяСтрокаТовар.Количество				= АлкогольСтр.Количество;
	//			НоваяСтрокаТовар.Цена					= (АлкогольСтр.Сумма/АлкогольСтр.Количество);
	//			НоваяСтрокаТовар.Сумма					= АлкогольСтр.Сумма;
	//			НоваяСтрокаТовар.СуммаНДС				= АлкогольСтр.СуммаНДС;
	//		Иначе
	//			НоваяСтрокаТовар.Количество				= ?(АлкогольСтр.Количество-СтрокаПоискаВозвратАлкоголь.Количество < 0,1,АлкогольСтр.Количество-СтрокаПоискаВозвратАлкоголь.Количество);
	//			НоваяСтрокаТовар.Цена					= (АлкогольСтр.Сумма - СтрокаПоискаВозвратАлкоголь.СтоимостьСНалогами)/(АлкогольСтр.Количество-СтрокаПоискаВозвратАлкоголь.Количество);
	//			НоваяСтрокаТовар.Сумма					= АлкогольСтр.Сумма - СтрокаПоискаВозвратАлкоголь.СтоимостьСНалогами;
	//			НоваяСтрокаТовар.СуммаНДС				= АлкогольСтр.СуммаНДС - СтрокаПоискаВозвратАлкоголь.СуммаНДС ;
	//		КонецЕсли; 
	//		
	//		
	//	КонецЕсли; 
	//	
	//КонецЦикла;
	//
	////Меняем условие отбора по алкоголю на без алкоголь
	//Запрос.Текст = СтрЗаменить(Запрос.Текст,"<>","=");
	//
	//ТаблицаБезАлкоголь = Запрос.Выполнить().Выгрузить();
	//ТаблицаБезАлкоголь.Свернуть("СтавкаНДС, ТоварСобственный","Количество, Сумма, СуммаНДС");
	//
	//Для каждого тСтрТовар Из ТаблицаБезАлкоголь Цикл
	//	
	//	Если тСтрТовар.СтавкаНДС = 18 Тогда
	//		ПоискПоНДС = НДС18;
	//	ИначеЕсли тСтрТовар.СтавкаНДС = 10 Тогда 
	//		ПоискПоНДС = НДС10;
	//	Иначе
	//		ПоискПоНДС = БезНДС;
	//	КонецЕсли;
	//	
	//	Если тСтрТовар.ТоварСобственный Тогда
	//		
	//		СтрокаПоискНоменклатурыПоНДС = НоменклатураПоНДС.Найти(ПоискПоНДС);
	//		НоваяСтрокаТовар = Документ.Товары.Добавить();
	//		НоваяСтрокаТовар.СтавкаНДС		= СтрокаПоискНоменклатурыПоНДС.СтавкаНДС;
	//		НоваяСтрокаТовар.Номенклатура   = СтрокаПоискНоменклатурыПоНДС.Номенклатура;
	//		//НоваяСтрокаТовар.Количество		= тСтрТовар.Количество;
	//		НоваяСтрокаТовар.СчетУчета		= СчетУчетаТоваровКомиссия;
	//		НоваяСтрокаТовар.СчетДоходов	= СчетДоходов;
	//		
	//		СтрокаПоискаВозврат = ВозвратыБезАлкогольТЗ.Найти(ПоискПоНДС); 
	//		
	//		Если СтрокаПоискаВозврат = Неопределено Тогда
	//			НоваяСтрокаТовар.Количество				= тСтрТовар.Количество;
	//			НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма/тСтрТовар.Количество);
	//			НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма;
	//			НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС;
	//		Иначе
	//			НоваяСтрокаТовар.Количество				= тСтрТовар.Количество-СтрокаПоискаВозврат.Количество;
	//			НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами)/тСтрТовар.Количество;
	//			НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами;
	//			НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС - СтрокаПоискаВозврат.СуммаНДС ;
	//		КонецЕсли;
	//		
	//	Иначе 
	//		СтрокаПоискНоменклатурыПоНДС = КомиссионнаяНоменклатураПоНДС.Найти(ПоискПоНДС);
	//		НоваяСтрокаТовар = Документ.АгентскиеУслуги.Добавить();
	//		НоваяСтрокаТовар.СтавкаНДС			= СтрокаПоискНоменклатурыПоНДС.СтавкаНДС;
	//		НоваяСтрокаТовар.Номенклатура   	= СтрокаПоискНоменклатурыПоНДС.Номенклатура;
	//		НоваяСтрокаТовар.Количество			= тСтрТовар.Количество;
	//		НоваяСтрокаТовар.Контрагент			= Объект.Комитент;
	//		НоваяСтрокаТовар.ДоговорКонтрагента	= ДоговорКомиссии;
	//		НоваяСтрокаТовар.СчетРасчетов		= СчетУчетаРассчетовСКонтрагентами;
	//		
	//		СтрокаПоискаВозврат = ВозвратыБезАлкогольТЗ.Найти(ПоискПоНДС); 
	//		
	//		Если СтрокаПоискаВозврат = Неопределено Тогда
	//			НоваяСтрокаТовар.Количество				= тСтрТовар.Количество;
	//			НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма/тСтрТовар.Количество);
	//			НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма;
	//			НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС;
	//		Иначе
	//			НоваяСтрокаТовар.Количество				= тСтрТовар.Количество-СтрокаПоискаВозврат.Количество;
	//			НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами)/(тСтрТовар.Количество-СтрокаПоискаВозврат.Количество);
	//			НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами;
	//			НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС - СтрокаПоискаВозврат.СуммаНДС ;
	//		КонецЕсли;
	//		
	//	КонецЕсли; 
	//	
	//	СтрокаПоискаВозврат = Неопределено;
	//	
	//КонецЦикла;
	#КонецОбласти
	
	#region рабочий_код_без_выделения_алкоголя
	
	тзВозвраты.Свернуть("СтавкаНДС, ТоварСобственный","Количество, СуммаНДС, СтоимостьСНалогами");
	
	//Номенклатура для НДС
	НоменклатураПоНДС 				= Объект.НоменклатураДляСтавокНДС.Выгрузить();
	КомиссионнаяНоменклатураПоНДС 	= Объект.КомиссионаяНоменклатураДляСтавокНДС.Выгрузить();
	
	//Предварительно очистим табличные части документа
	Документ.Товары.Очистить();
	Документ.АгентскиеУслуги.Очистить();
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	ЗапросТовары.Текст = 
	"ВЫБРАТЬ
	|	Товары.СтавкаНДС 		КАК СтавкаНДС,
	|	Товары.Сумма 			КАК Сумма,
	|	Товары.СуммаНДС 		КАК СуммаНДС,
	|	Товары.ТоварСобственный	КАК ТоварСобственный,
	|	Товары.Количество 		КАК Количество
	|ПОМЕСТИТЬ Товары_ВТ
	|ИЗ
	|	&ТаблицаТоваров КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары_ВТ.СтавкаНДС 		КАК СтавкаНДС,
	|	Товары_ВТ.Сумма 			КАК Сумма,
	|	Товары_ВТ.СуммаНДС			КАК СуммаНДС,
	|	Товары_ВТ.ТоварСобственный	КАК ТоварСобственный,
	|	Товары_ВТ.Количество		КАК Количество
	|ИЗ
	|	Товары_ВТ КАК Товары_ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары_ВТ" ;
	
	тзТовары = ЗапросТовары.Выполнить().Выгрузить(); 	
	тзТовары.Свернуть("СтавкаНДС, ТоварСобственный","Количество, Сумма, СуммаНДС");
	
	Для каждого тСтрТовар Из тзТовары Цикл
		
		Если тСтрТовар.СтавкаНДС = 18 Тогда
			ПоискПоНДС = НДС18;
		ИначеЕсли тСтрТовар.СтавкаНДС = 10 Тогда 
			ПоискПоНДС = НДС10;
		Иначе
			ПоискПоНДС = БезНДС;
		КонецЕсли;
		
		СтрокаПоискаВозврат = тзВозвраты.Найти(ПоискПоНДС); 
		
		Если тСтрТовар.ТоварСобственный Тогда
			
			СтрокаПоискНоменклатурыПоНДС = НоменклатураПоНДС.Найти(ПоискПоНДС);
			НоваяСтрокаТовар = Документ.Товары.Добавить();
			НоваяСтрокаТовар.СтавкаНДС					= СтрокаПоискНоменклатурыПоНДС.СтавкаНДС;
			НоваяСтрокаТовар.Номенклатура   			= СтрокаПоискНоменклатурыПоНДС.Номенклатура;
			НоваяСтрокаТовар.СчетУчета					= СчетУчетаТоваров;
			НоваяСтрокаТовар.СчетДоходов				= СчетДоходов;
			НоваяСтрокаТовар.СчетРасходов				= СчетРасходов;
			НоваяСтрокаТовар.СчетУчетаНДСПоРеализации	= СчетУчетаНДС;
			
			Если СтрокаПоискаВозврат = Неопределено Тогда
				НоваяСтрокаТовар.Количество				= тСтрТовар.Количество;
				НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма/тСтрТовар.Количество);
				НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма;
				НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС;
			Иначе
				НоваяСтрокаТовар.Количество				= тСтрТовар.Количество-СтрокаПоискаВозврат.Количество;
				НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами)/тСтрТовар.Количество;
				НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами;
				НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС - СтрокаПоискаВозврат.СуммаНДС ;
				тзВозвраты.Удалить(СтрокаПоискаВозврат);
			КонецЕсли;
			
		Иначе 
			СтрокаПоискНоменклатурыПоНДС = КомиссионнаяНоменклатураПоНДС.Найти(ПоискПоНДС);
			НоваяСтрокаТовар = Документ.АгентскиеУслуги.Добавить();
			НоваяСтрокаТовар.СтавкаНДС			= СтрокаПоискНоменклатурыПоНДС.СтавкаНДС;
			НоваяСтрокаТовар.Номенклатура   	= СтрокаПоискНоменклатурыПоНДС.Номенклатура;
			НоваяСтрокаТовар.Количество			= тСтрТовар.Количество;
			НоваяСтрокаТовар.Контрагент			= Объект.Комитент;
			НоваяСтрокаТовар.ДоговорКонтрагента	= ДоговорКомиссии;
			НоваяСтрокаТовар.СчетРасчетов		= СчетУчетаРассчетовСКонтрагентами;
			
			Если СтрокаПоискаВозврат = Неопределено Тогда
				НоваяСтрокаТовар.Количество				= тСтрТовар.Количество;
				НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма/тСтрТовар.Количество);
				НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма;
				НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС;
			Иначе
				НоваяСтрокаТовар.Количество				= тСтрТовар.Количество-СтрокаПоискаВозврат.Количество;
				НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами)/(тСтрТовар.Количество-СтрокаПоискаВозврат.Количество);
				НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами;
				НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС - СтрокаПоискаВозврат.СуммаНДС ;
				тзВозвраты.Удалить(СтрокаПоискаВозврат);
			КонецЕсли;
			
		КонецЕсли; 
		
		СтрокаПоискаВозврат = Неопределено;
		
	КонецЦикла;
	
	#endregion
	
	
КонецФункции


#КонецОбласти


#Область Работа_со_справочниками

&НаСервере
Функция ПолучитьНоменклатуруДляАлкоголя()
	
	Возврат Справочники.Номенклатура.НайтиПоНаименованию("Товар ПИВО, АЛКОГОЛЬ");
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСкладыИзСупермага(Команда)
	
	ПолучитьСкладыИзСупермагаНаСервере();
	
КонецПроцедуры

//Получим склады с их идентификаторами из Супермаг+ (необходимо для отбора по магазину)
&НаСервере
Функция ПолучитьСкладыИзСупермагаНаСервере()
	
	ТекстЗапроса =
	"SELECT
	|	NAME 	AS ""НаименованиеСклада"",
	|   ID 		AS ""Идентификатор"" 
	|FROM 
	|	SUPERMAG.SMSTORELOCATIONS";
	
	Connection = Подключиться_к_БД_Oracle();
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	
	Пока НЕ RecordSet.EOF Цикл
		
		НоваяСтрока = Объект.ИдентификаторыСкладов.Добавить();
		НоваяСтрока.Склад 				= Справочники.Склады.ПустаяСсылка();
		НоваяСтрока.НаименованиеСклада  = RecordSet.Fields("НаименованиеСклада").Value;
		НоваяСтрока.Идентификатор		= RecordSet.Fields("Идентификатор").Value;
		НоваяСтрока.Флаг				= Ложь;
		
		RecordSet.MoveNext();
		
	КонецЦикла;
	
	RecordSet.Close();
	Connection.Close();
	
КонецФункции

&НаКлиенте
Процедура ПолучитьГруппы(Команда)
	
	ПолучитьИерархиюНоменклатурыИзСупермага();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИерархиюНоменклатурыИзСупермага()
	
	ТекстЗапроса =
	"SELECT
	|	TREE 	AS ""Дерево"",
	|	NAME 	AS ""НаименованиеГруппы"",
	|	ID 		AS ""КодГруппы""
	|FROM 
	|	SUPERMAG.SACARDCLASS";
	
	Connection = Подключиться_к_БД_Oracle();
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	
	While NOT RecordSet.EOF DO
		
		нСтр = НоменклатурныеГруппыТЗ.Добавить();
		нСтр.Дерево		 		= RecordSet.Fields("Дерево").Value;
		нСтр.НаименованиеГруппы	= RecordSet.Fields("НаименованиеГруппы").Value;
		нСтр.КодГруппы			= RecordSet.Fields("КодГруппы").Value;
		нСтр.УровеньИерархии	= СтрЧислоВхождений(RecordSet.Fields("Дерево").Value,"."); 		
		
		RecordSet.MoveNext();
		
	EndDo;
	
	//Теперь заполним колонку "Родитель" в НоменклатурныеГруппыТЗ
	ЗаполнитьРодителяНоменклатурныеГруппыТЗ();
	
	//Выгрузим результаты в дерево значениий НоменклатурныеГруппыДЗ
	НоменклатурныеГруппыВДеревоЗначений();
	
	RecordSet.Close();
	Connection.Close();
	
КонецФункции

&НаСервере
Функция ЗаполнитьТабличнуюЧастьКомиссионаяНоменклатураДляСтавокНДС()
	
	Объект.КомиссионаяНоменклатураДляСтавокНДС.Загрузить(Поиск_номенклатуры_для_НДС_по_дополнительному_свойству("Комиссия"));
	
КонецФункции

&НаСервере
Функция ЗаполнитьТабличнуюЧастьНоменклатураДляСтавокНДС()
	
	Объект.НоменклатураДляСтавокНДС.Загрузить(Поиск_номенклатуры_для_НДС_по_дополнительному_свойству("Собственный товар"));
	
КонецФункции

//Ищем номенклатуру, для свертки товаров, по ставке НДС, по дополнительному свойству где:
//						- ВидТовара (тип.строка). Вид товара "Собственный товар" или Комиссия
//						- "Товар (на комиссии) для ставки НДС" - это для комиссионого товара
//						- "Товар для ставки НДС" - это собственный товар
&НаСервереБезКонтекста
Функция Поиск_номенклатуры_для_НДС_по_дополнительному_свойству(ВидТовара)
	
	Если ВидТовара = "Собственный товар" Тогда
		ДополнительноеСвойство 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Товар для ставки НДС (Номенклатура)");
	Иначе
		ДополнительноеСвойство	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Товар (на комиссии) для ставки НДС (Номенклатура)");
	КонецЕсли; 
	
	Запрос = Новый  Запрос;
	Запрос.УстановитьПараметр("ДополнительноеСвойство", ДополнительноеСвойство);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект.Ссылка КАК Номенклатура,
	|	ДополнительныеСведения.Объект.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &ДополнительноеСвойство
	|	И НЕ ДополнительныеСведения.Значение ЕСТЬ NULL
	|	И НЕ ДополнительныеСведения.Значение = """"
	|	И НЕ ДополнительныеСведения.Значение = НЕОПРЕДЕЛЕНО";
	
	Возврат Запрос.Выполнить().Выгрузить(); 
	
КонецФункции

&НаСервере
Функция ЗаполнитьРодителяНоменклатурныеГруппыТЗ()
	
	тзНоменклатурныеГруппы = РеквизитФормыВЗначение("НоменклатурныеГруппыТЗ");
	Разделитель = ".";
	
	Для каждого тзСтр Из тзНоменклатурныеГруппы Цикл		
		
		Если СтрЧислоВхождений(тзСтр.Дерево,Разделитель)>1 Тогда
			мСтрока = СтрРазделить(тзСтр.Дерево,Разделитель);
			мСтрока.Удалить(СтрЧислоВхождений(тзСтр.Дерево,Разделитель)-1);
			стрПоиск = СтрСоединить(мСтрока,Разделитель);
			тзСтр.Родитель = тзНоменклатурныеГруппы.Найти(стрПоиск,"Дерево").КодГруппы; 
		Иначе 
			тзСтр.Родитель = "0000000001";
		КонецЕсли; 
		
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(тзНоменклатурныеГруппы,"НоменклатурныеГруппыТЗ");
	
КонецФункции

&НаСервере
Процедура НоменклатурныеГруппыВДеревоЗначений()
	
	дНоменклатурныеГруппы 	= РеквизитФормыВЗначение("НоменклатурныеГруппыДЗ");
	тзНоменклатурныеГруппы 	= РеквизитФормыВЗначение("НоменклатурныеГруппыТЗ");
	
	НоменклатурныеГруппыВДеревоЗначенийРекурсия(дНоменклатурныеГруппы, тзНоменклатурныеГруппы, "0000000001");
	тзНоменклатурныеГруппы.Очистить();
	
	дНоменклатурныеГруппы.Строки.Сортировать("Дерево");
	ЗначениеВРеквизитФормы(дНоменклатурныеГруппы, "НоменклатурныеГруппыДЗ"); 	
	
КонецПроцедуры

&НаСервере
Процедура НоменклатурныеГруппыВДеревоЗначенийРекурсия(Дерево, тзИсходник, Родитель)
	
	тПоиск = Новый Структура("Родитель", Родитель);
	тМассив = тзИсходник.НайтиСтроки(тПоиск);
	
	Для Каждого тСтр Из тМассив Цикл
		нСтр = Дерево.Строки.Добавить();
		нСтр.Дерево				= тСтр.Дерево;
		нСтр.НаименованиеГруппы	= тСтр.НаименованиеГруппы;
		нСтр.КодГруппы			= тСтр.КодГруппы;
		НоменклатурныеГруппыВДеревоЗначенийРекурсия(нСтр, тзИсходник, тСтр.КодГруппы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОтборПоГруппам(Команда)
	
	ПолучитьОтборТовараПоИерархииНоменклатуры();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОтборТовараПоИерархииНоменклатуры()
	
	тДерево 			= РеквизитФормыВЗначение("НоменклатурныеГруппыДЗ");
	тТаблицаЗначений 	= РеквизитФормыВЗначение("ОтборГруппыТовара");
	тТаблицаЗначений.Очистить();
	ОбходДереваРекурсия(тДерево, тТаблицаЗначений);
	ЗначениеВРеквизитФормы(тТаблицаЗначений, "ОтборГруппыТовара");
	
КонецФункции

&НаСервере
Функция ОбходДереваРекурсия(тДерево, тТаблицаЗначений)
	
	Для Каждого тСтр Из тДерево.Строки Цикл
		Если тСтр.Отбор Тогда
			нСтр = тТаблицаЗначений.Добавить();
			нСтр.КодГруппы = тСтр.КодГруппы;
			стрПотомки = тСтр.Строки;
			Если тСтр.Строки.Количество()>0 Тогда
				ОбходПотомковДереваРекурсия(тСтр.Строки, тТаблицаЗначений);
			КонецЕсли;
		КонецЕсли; 
		
		Если тСтр.Строки.Количество()>0 Тогда
			ОбходДереваРекурсия(тСтр, тТаблицаЗначений);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции 

&НаСервере
Функция ОбходПотомковДереваРекурсия(тДеревоПотомков, тТаблицаЗначений)
	
	Для каждого тСтр Из тДеревоПотомков Цикл
		нСтр = тТаблицаЗначений.Добавить();
		нСтр.КодГруппы = тСтр.КодГруппы;
		Если тСтр.Строки.Количество()>0 Тогда
			ОбходПотомковДереваРекурсия(тСтр.Строки, тТаблицаЗначений);
		КонецЕсли;
	КонецЦикла; 
	
КонецФункции


#КонецОбласти 


#КонецОбласти 
#Область Вспомогательные_и_отладочные_функции

#Область код_для_разработки_и_отладки

////Функция создана на период разработки, для быстрого заполнения первоначального отбора.
////По окончании рарзаботки и отладки необходимо закоментировать эту область кода
//&НаКлиенте
//Функция ЗаполнениеОтборовНаПериодРазработки()
//	
//	ДокументЗагрузки 				= 3;
//	Объект.Период.ДатаНачала		= '20171001';
//	Объект.Период.ДатаОкончания 	= '20171001';
//	Объект.ИдентификаторыСкладов.Получить(5).Флаг = Истина;
//	ПолучитьОрганизациюКомитентаСклад();
//	
//КонецФункции

//&НаСервере
//Функция ПолучитьОрганизациюКомитентаСклад()
//	
//	Объект.Организация 	= Справочники.Организации.НайтиПоНаименованию("Торгцентр ООО");
//	Объект.Комитент 	= Справочники.Контрагенты.НайтиПоНаименованию("ООО ""Теско""");
//	Объект.Склад		= Справочники.Склады.НайтиПоНаименованию("Торговый зал");
//	
//КонецФункции

#КонецОбласти 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	БоеваяДемоБазаСупермаг = 1; // 1 это боевая, 2 это демо
	ЗаполнитьПараметрыСоединенияOracle();
	ДокументЗагрузки	= 1;
	ЗаполнитьСтавкиНДС();	
	ЗаполнитьСчетаУчета();
	ПолучитьСкладыИзСупермага("");
	ЗаполнитьТабличнуюЧастьНоменклатураДляСтавокНДС();
	ЗаполнитьТабличнуюЧастьКомиссионаяНоменклатураДляСтавокНДС();
	НоменклатураДляАлкоголя = ПолучитьНоменклатуруДляАлкоголя();
	ПолучитьГруппы("");
	
	//ЗаполнениеОтборовНаПериодРазработки(); //По окончании рарзаботки и отладки необходимо закоментировать эту функцию
	//ВыбратьДокументы("",Истина);
	
КонецПроцедуры

&НаКлиенте 
Функция ЗаполнитьСчетаУчета()
	
	МассивСчетовУчета = ПолучитьСчетаУчетов();
	СчетУчетаТоваровКомиссия			= МассивСчетовУчета[0];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","00401");
	СчетУчетаТоваров					= МассивСчетовУчета[1];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","4102");
	СчетУчетаРассчетовСКонтрагентами 	= МассивСчетовУчета[2];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","7605");
	СчетУчетаРасчетовПоАвансам 			= МассивСчетовУчета[3];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","6002");
	СчетУчетаНДС						= МассивСчетовУчета[4];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","1903");
	СчетУчетаРасчетовПоПретензиям      	= МассивСчетовУчета[5];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","6001");
	СчетКасса							= МассивСчетовУчета[6];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","5001");
	СчетДоходов							= МассивСчетовУчета[7];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","90011");
	СчетРасходов						= МассивСчетовУчета[8];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","90021");
	СчетУчетаНДСАлкоголь				= МассивСчетовУчета[9];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","9003");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСчетаУчетов()
	
	мСчетаУчетов = Новый Массив;
	мСчетаУчетов.Вставить(0, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","00401"));
	мСчетаУчетов.Вставить(1, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","4102"));
	мСчетаУчетов.Вставить(2, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","7605"));
	мСчетаУчетов.Вставить(3, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","6002"));
	мСчетаУчетов.Вставить(4, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","1903"));
	мСчетаУчетов.Вставить(5, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","6001"));
	мСчетаУчетов.Вставить(6, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","5001"));
	мСчетаУчетов.Вставить(7, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","90011"));
	мСчетаУчетов.Вставить(8, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","90021"));
	мСчетаУчетов.Вставить(9, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","9003"));
	Возврат мСчетаУчетов;
	
КонецФункции // ()

&НаКлиенте
Функция ЗаполнитьСтавкиНДС()
	
	МассивСтавокНДС = ПолучитьСтавкиНДС();
	БезНДС 	= МассивСтавокНДС[0];//Перечисления.СтавкиНДС.БезНДС;
	НДС10	= МассивСтавокНДС[1];//Перечисления.СтавкиНДС.НДС10;
	НДС18	= МассивСтавокНДС[2];//Перечисления.СтавкиНДС.НДС18;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтавкиНДС()
	
	СтавкиНДС = Новый Массив;
	СтавкиНДС.Вставить(0,Перечисления.СтавкиНДС.БезНДС);
	СтавкиНДС.Вставить(1,Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС.Вставить(2,Перечисления.СтавкиНДС.НДС18);
	Возврат СтавкиНДС;
	
КонецФункции

//По имени команды обрабатываем действие с флагом(Булево)
//Команда должна называться согласно шаблону "УстанФлаг_ИмяТабличнойЧасти/СнятьФлаг_ИмяТабличнойЧасти"
//Первые пять символов префикс команды:
//"Устан" 	- проставляем флажки, в табличной части
//"Снять"	- снимаем флажки, с табличной части
//С 11 символа и по конец строки, получаем имя табличной части
&НаКлиенте
Функция ОбработатьФлаг(Команда)
	
	ФлагВзведен = ?(Лев(Команда.Имя,5)="Устан", Истина, Ложь);
	ИмяТабличнойЧасти = Сред(Команда.Имя,11);
	УстановитьСнятьФлаг(ИмяТабличнойЧасти, ФлагВзведен)
	
КонецФункции

//Ставим или снимаем флажки, со всей табличной части
&НаКлиенте
Функция УстановитьСнятьФлаг(ТабличнаяЧасть, ВзводФлага)
	
	Если ТабличнаяЧасть = "НоменклатурныеГруппыДЗ" Тогда
		УстановитьФлагНоменклатурныеГруппыДЗ(ВзводФлага);
	Иначе 
		Для каждого СтрокаФлаг Из Объект[ТабличнаяЧасть] Цикл
			СтрокаФлаг.Флаг = ВзводФлага; 	
		КонецЦикла; 
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьФлагНоменклатурныеГруппыДЗ(ВзводФлага)
	
	дНоменклатурныеГруппыДЗ = РеквизитФормыВЗначение("НоменклатурныеГруппыДЗ");
	
	Для каждого дСтрока Из дНоменклатурныеГруппыДЗ.Строки Цикл
		дСтрока.Отбор = ВзводФлага;	
	КонецЦикла;
	ЗначениеВРеквизитФормы(дНоменклатурныеГруппыДЗ,"НоменклатурныеГруппыДЗ");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДополнительноеСвойство(ДокументТип)
	
	Если ДокументТип = "ПоступлениеТоваровУслуг"  Тогда
		Возврат	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Идентификатор СМ ("+Метаданные.Документы[ДокументТип].Синоним+")");
	ИначеЕсли ДокументТип = "ВозвратТоваровПоставщику"  ИЛИ ДокументТип  = "ОтчетОРозничныхПродажах" Тогда
		Возврат	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Идентификатор СМ ("+Метаданные.Документы[ДокументТип].ПредставлениеСписка+")");
	КонецЕсли; 
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьДоговорКонтрагента(Контрагент)
	
	ВидДоговораПоиск = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	Возврат Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("ВидДоговора", ВидДоговораПоиск, , Контрагент); 
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивВСтрокуЗапроса(МассивВСтроку)
	
	//Раскладываем массив на строку, для вставки, в условие отбора, в запрос
	СтрокаИзМассива ="";
	Для каждого ЭлементМассива Из МассивВСтроку Цикл
		СтрокаИзМассива = СтрокаИзМассива+"'"+ЭлементМассива+"',";
	КонецЦикла;
	
	Возврат Лев(СтрокаИзМассива,СтрДлина(СтрокаИзМассива)-1);//Удалим лишнюю запятую из конца строки
	
КонецФункции

////<Запись дополнительного свойства "Идентификатор СМ" для новых объектов>
//
// Параметры:
//<ОбъектСсылка>  - <Объект.Ссылка> - < Ссылка на объект, для которого записывается доп.свойство>
//<ДопСвойство>  - <ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Ссылка> - <ссылка на дополнительное свойство>
//<ИдентификаторСМ> - <Записываемое значение, для дополнительного свойства>
//Возвращаемое значение: Отсутствует
&НаСервереБезКонтекста
Функция ЗаписатьИдентификаторСМ(ОбъектСсылка, ДопСвойство, ИдентификаторСМ)
	
	МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект 	= ОбъектСсылка;
	МенеджерЗаписи.Свойство = ДопСвойство;
	МенеджерЗаписи.Значение	= ИдентификаторСМ;
	МенеджерЗаписи.Записать();
	
КонецФункции

//проверка, взведен ли флаг хотя бы на одной строке
&НаСервере
Функция ВыборСделан(ТаблицаПроверки)
	
	Выбрано = 0;
	
	Для каждого СтрокаТЗ Из ТаблицаПроверки Цикл
		Если СтрокаТЗ.Флаг Тогда
			Выбрано = Выбрано +1;
		КонецЕсли;
	КонецЦикла;
	
	Если Выбрано > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Процедура КомиссионерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДоговорКомиссии = ПолучитьДоговорКомиссии(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссионерПриИзменении(Элемент)
	
	ДоговорКомиссии = ПолучитьДоговорКомиссии(Объект.Комитент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоговорКомиссии(Контрагент)
	
	ВидДоговораПоиск 	= Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	Возврат Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("ВидДоговора", ВидДоговораПоиск, , Контрагент);  
	
КонецФункции


#КонецОбласти 

